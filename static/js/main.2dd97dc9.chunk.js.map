{"version":3,"sources":["components/RandomQuotes/QuotesAPI.jsx","components/RandomQuotes/RandomQuotes.jsx","App.js","reportWebVitals.js","index.js"],"names":["apiStates","RandomQuotes","props","useState","quote","setQuote","author","setAuthor","url","state","error","data","setData","setPartData","partialData","useEffect","fetch","then","response","json","catch","QuotesAPI","getRandomQuote","index","Math","floor","random","quotes","length","getRandomQuoteIndex","randomQuote","apiResult","className","Fragment","id","title","target","href","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAEaA,EACH,UADGA,EAEL,QAFKA,EAGH,U,eCGK,SAASC,EAAaC,GACpC,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EDHwB,SAACC,GACzB,MAAwBL,mBAAS,CAChCM,MAAOT,EACPU,MAAO,GACPC,KAAM,KAHP,mBAAOA,EAAP,KAAaC,EAAb,KAMMC,EAAc,SAACC,GAAD,OAAiBF,EAAQ,2BAAKD,GAASG,KAuB3D,OArBAC,qBAAU,WACTF,EAAY,CACXJ,MAAOT,IAGRgB,MAAMR,GACJS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACN,GACNE,EAAY,CACXJ,MAAOT,EACPW,YAGDS,OAAM,WACNP,EAAY,CACXJ,MAAOT,EACPU,MAAO,sBAGR,IAEIC,EC3BwBU,CAL/B,0IAKQZ,EAAR,EAAQA,MAAOE,EAAf,EAAeA,KAAMD,EAArB,EAAqBA,MAMfY,EAAiB,WACtB,GAAc,YAAVb,EAAqB,CACxB,IAAMc,EANoB,SAACZ,GAC5B,OAAOa,KAAKC,MAAMD,KAAKE,SAAWf,EAAKgB,OAAOC,QAK/BC,CAAoBlB,GAC5BmB,EAAcnB,EAAKgB,OAAOJ,GAChClB,EAASyB,EAAY1B,OACrBG,EAAUuB,EAAYxB,UAIpByB,EAAY,GAMhB,OAJAhB,qBAAU,WACTO,MACE,CAACb,IAEIA,GACP,KAAKT,EACJ+B,EAAY,oBAAGC,UAAU,QAAb,oBAA6BtB,GAAS,mBAClD,MACD,KAAKV,EACJ+B,EACC,eAAC,IAAME,SAAP,WACC,sBAAKD,UAAU,aAAf,UACC,mBAAGA,UAAU,qBACb,sBAAME,GAAG,OAAT,SAAiB9B,OAElB,sBAAK4B,UAAU,eAAf,cACE,sBAAME,GAAG,SAAT,SAAmB5B,UAIvB,MACD,QACCyB,EAAY,mBAAGC,UAAU,UAAb,wBAGd,OACC,sBAAKE,GAAG,YAAR,UACEH,EACD,sBAAKC,UAAU,UAAf,UACC,mBACCA,UAAU,SACVE,GAAG,cACHC,MAAM,oBACNC,OAAO,OACPC,KAAK,2NALN,SAOC,mBAAGL,UAAU,oBAEd,mBACCA,UAAU,SACVE,GAAG,eACHC,MAAM,6BACNC,OAAO,SACPC,KAAK,8TALN,SAOC,mBAAGL,UAAU,mBAEd,wBAAQA,UAAU,SAASE,GAAG,YAAYI,QAAShB,EAAnD,6BChDWiB,MATf,WAEC,OACC,qBAAKP,UAAU,UAAf,SACC,cAAC/B,EAAD,OCVYuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2dd97dc9.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport const apiStates = {\n\tLOADING: \"LOADING\",\n\tERROR: \"ERROR\",\n\tSUCCESS: \"SUCCESS\",\n};\n\nexport const QuotesAPI = (url) => {\n\tconst [data, setData] = useState({\n\t\tstate: apiStates.LOADING,\n\t\terror: \"\",\n\t\tdata: [],\n\t});\n\n\tconst setPartData = (partialData) => setData({ ...data, ...partialData });\n\n\tuseEffect(() => {\n\t\tsetPartData({\n\t\t\tstate: apiStates.LOADING,\n\t\t});\n\n\t\tfetch(url)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetPartData({\n\t\t\t\t\tstate: apiStates.SUCCESS,\n\t\t\t\t\tdata,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tsetPartData({\n\t\t\t\t\tstate: apiStates.ERROR,\n\t\t\t\t\terror: \"fetch failed\",\n\t\t\t\t});\n\t\t\t});\n\t}, []);\n\n\treturn data;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { apiStates, QuotesAPI } from \"./QuotesAPI\";\n\nimport \"./styles.scss\";\n\nconst APIURL =\n\t\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nexport default function RandomQuotes(props) {\n\tconst [quote, setQuote] = useState(\"\");\n\tconst [author, setAuthor] = useState(\"\");\n\tconst { state, data, error } = QuotesAPI(APIURL);\n\n\tconst getRandomQuoteIndex = (data) => {\n\t\treturn Math.floor(Math.random() * data.quotes.length);\n\t};\n\n\tconst getRandomQuote = () => {\n\t\tif (state === \"SUCCESS\") {\n\t\t\tconst index = getRandomQuoteIndex(data);\n\t\t\tconst randomQuote = data.quotes[index];\n\t\t\tsetQuote(randomQuote.quote);\n\t\t\tsetAuthor(randomQuote.author);\n\t\t}\n\t};\n\n\tlet apiResult = \"\";\n\n\tuseEffect(() => {\n\t\tgetRandomQuote();\n\t}, [state]);\n\n\tswitch (state) {\n\t\tcase apiStates.ERROR:\n\t\t\tapiResult = <p className=\"error\">ERROR: {error || \"General error\"}</p>;\n\t\t\tbreak;\n\t\tcase apiStates.SUCCESS:\n\t\t\tapiResult = (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<div className=\"quote-text\">\n\t\t\t\t\t\t<i className=\"fa fa-quote-left\"></i>\n\t\t\t\t\t\t<span id=\"text\">{quote}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"quote-author\">\n\t\t\t\t\t\t-<span id=\"author\">{author}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tapiResult = <p className=\"loading\">Loading...</p>;\n\t}\n\n\treturn (\n\t\t<div id=\"quote-box\">\n\t\t\t{apiResult}\n\t\t\t<div className=\"buttons\">\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"button\"\n\t\t\t\t\tid=\"tweet-quote\"\n\t\t\t\t\ttitle=\"Tweet this quote!\"\n\t\t\t\t\ttarget=\"_top\"\n\t\t\t\t\thref=\"https://twitter.com/intent/tweet?hashtags=quotes&amp;related=freecodecamp&amp;text=%22Every%20child%20is%20an%20artist.%20%20The%20problem%20is%20how%20to%20remain%20an%20artist%20once%20he%20grows%20up.%22%20Pablo%20Picasso\"\n\t\t\t\t>\n\t\t\t\t\t<i className=\"fa fa-twitter\"></i>\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"button\"\n\t\t\t\t\tid=\"tumblr-quote\"\n\t\t\t\t\ttitle=\"Post this quote on tumblr!\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\thref=\"https://www.tumblr.com/widgets/share/tool?posttype=quote&amp;tags=quotes,freecodecamp&amp;caption=Pablo%20Picasso&amp;content=Every%20child%20is%20an%20artist.%20%20The%20problem%20is%20how%20to%20remain%20an%20artist%20once%20he%20grows%20up.&amp;canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&amp;shareSource=tumblr_share_button\"\n\t\t\t\t>\n\t\t\t\t\t<i className=\"fa fa-tumblr\"></i>\n\t\t\t\t</a>\n\t\t\t\t<button className=\"button\" id=\"new-quote\" onClick={getRandomQuote}>\n\t\t\t\t\tNew quote\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import \"./App.css\";\nimport RandomQuotes from \"./components/RandomQuotes\";\n\nvar colors = [\n\t\"#16a085\",\n\t\"#27ae60\",\n\t\"#2c3e50\",\n\t\"#f39c12\",\n\t\"#e74c3c\",\n\t\"#9b59b6\",\n\t\"#FB6964\",\n\t\"#342224\",\n\t\"#472E32\",\n\t\"#BDBB99\",\n\t\"#77B1A9\",\n\t\"#73A857\",\n];\n\nfunction App() {\n\tlet clickChild = null;\n\treturn (\n\t\t<div className=\"wrapper\">\n\t\t\t<RandomQuotes />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}